#include "widget.h"
#include <QTimer>
Widget::Widget(QWidget *parent)
    : QWidget(parent)
{
    this->resize(600, 150);
    this->setWindowTitle("一起来看刘新宇组~");
    sendDataPort = new SerialPort(this, "COM3");    // 发端口"COM3"

    QTimer *ptimer = new QTimer(this);
    // 定时发送数据-连接
    connect(ptimer, SIGNAL(timeout()),
            this, SLOT(sendEcgpkg()));
    ptimer->start(10);
}

Widget::~Widget()
{
}

int ecgData[] = {
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2008, 2016, 2016, 2016, 2024, 2032, 2048,
    2064, 2064, 2064, 2072, 2080, 2080, 2080, 2088, 2096, 2104,
    2112, 2112, 2112, 2112, 2112, 2112, 2104, 2096, 2088,
    2080, 2080, 2080, 2072, 2064, 2064, 2064, 2048, 2032, 2032,
    2032, 2016, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 1992, 1984, 1976,
    1968, 1960, 1952, 1944, 1936, 1944, 1952, 2016, 2080, 2136,
    2192, 2256, 2320, 2376, 2432, 2488, 2544, 2568, 2592, 2536,
    2480, 2424, 2368, 2304, 2240, 2184, 2128, 2072, 2016, 1968,
    1920, 1928, 1936, 1944, 1952, 1960, 1968, 1984, 2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2000, 2000, 2008, 2016, 2024, 2032, 2032,
    2032, 2048, 2064, 2064, 2064, 2072, 2080, 2088, 2096, 2104,
    2112, 2112, 2112, 2120, 2128, 2136, 2144, 2152, 2160, 2160,
    2160, 2160, 2160, 2168, 2176, 2176, 2176, 2184, 2192,
    2192, 2192, 2192, 2200, 2208, 2208, 2208, 2208, 2208, 2208,
    2208, 2200, 2192, 2192, 2192, 2184, 2176, 2176, 2176, 2168,
    2160, 2160, 2160, 2144, 2128, 2128, 2128, 2128, 2128, 2112,
    2096, 2088, 2080, 2072, 2064, 2064, 2064, 2048, 2032, 2024,
    2016, 2016, 2016, 2008, 2000, 2000, 2000, 2000, 2000,
    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000
};

void Widget::sendEcgpkg()
{
    char dataBuf[10];  // 打包后的缓存数据
    unsigned int ecg[3] = {2048, 2048, 2048};
    int i;

    // 总长度
    int len = sizeof(ecgData) / sizeof(int);

    // 循环的取
    if (ecgDataIndex >= len)
    {
        ecgDataIndex = 0;
    }

    // 取数据
    ecg[0] = ecgData[ecgDataIndex++];  //ECG1
    ecg[1] = ecgData[ecgDataIndex++];  //ECG2
    ecg[2] = ecgData[ecgDataIndex++];  //ECG3

    // 封包（打包）
    dataBuf[0] = 0x08;   // 包类型ID
    dataBuf[1] = 0x80;   // 包头

    for(i=0; i<3; i++)
    {
        dataBuf[1] = dataBuf[1] | ((ecg[i] & 0x80) >> (7-i*2-1));
        dataBuf[1] = dataBuf[1] | ((ecg[i] & 0x8000) >> (15-i*2));

        // dataBuf[2]: ECG1的高字节
        // dataBuf[4]: ECG2的高字节
        // dataBuf[6]: ECG3的高字节
        dataBuf[i*2+2] = 0x80 | ((ecg[i] >> 8) & 0x7f);
        // dataBuf[3]: ECG1的高字节
        // dataBuf[5]: ECG2的高字节
        // dataBuf[7]: ECG3的高字节
        dataBuf[i*2+3] = 0x80 | (ecg[i] & 0x7f);         // dataBuf[3];ECG1的低字节

    }
    dataBuf[8] = 0x80;   // ECG状态
    dataBuf[9] = 0xFF;   // 检验（假的）

    sendDataPort->sendMessage(dataBuf, 10);

}
